@page "/priorities"

@inject IPriorityService priorityService

<PageHeader Title="Priorities" />

<main class="content p-3">

    @if (items is null)
    {
        <LoadingPanel />
    }
    else
    {
        foreach (var item in items)
        {
            <PriorityItemsList Model="item" OnAdd="AddTitle" OnSave="SaveTitle" OnDelete="DeleteTitle" />
        }
    }

</main>

@code {
    List<PriorityListViewModel> items;

    protected override async Task OnInitializedAsync()
    {
        items = await priorityService.GetListsAsync();
    }

    async Task AddTitle((PriorityViewModel item, PriorityGroupViewModel group) parameters)
    {
        await priorityService.CreateAsync(parameters.item, parameters.group);

        var list = GetItemList(parameters.group.Header);
        list.Add(parameters.item);
    }

    async Task SaveTitle((PriorityViewModel item, PriorityGroupViewModel group) parameters)
    {
        await priorityService.UpdateAsync(parameters.item, parameters.group);

        var item = GetItem(parameters.group.Header, parameters.item.Name);
        item.PriorityLevel = parameters.item.PriorityLevel;
    }

    async Task DeleteTitle((PriorityViewModel item, PriorityGroupViewModel group) parameters)
    {
        await priorityService.DeleteAsync(parameters.item, parameters.group);

        var list = GetItemList(parameters.group.Header);
        var item = GetItem(parameters.group.Header, parameters.item.Name);
        list.Remove(item);
    }

    List<PriorityViewModel> GetItemList(string header) => items.Where(r => r.Group.Header == header).Single().Items;
    PriorityViewModel GetItem(string header, string name) => GetItemList(header).Where(r => r.Name == name).Single();
}
