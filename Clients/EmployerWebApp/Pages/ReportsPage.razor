@page "/reports"

@inject IReportService reportService

<PageHeader Title="Reports" />

<main class="content p-3">

    @if (issues is null)
    {
        <LoadingPanel />
    }
    else
    {
        <div class="d-flex justify-content-end mb-2">
            <PollingButton OnTick="@LoadIssues"  />
        </div>

        @if (issues.Any())
        {
            <table class="table">

                <thead class="bg-secondary text-white">

                    <ReportHeaderRow IsAnyDetailsVisible="@isAnyDetailsVisible" OnShowDetails="ShowAllDetails" />

                </thead>

                <tbody>
                    @for (int i = 0; i < issues.Count; i++)
                    {
                        int index = i;

                        <ReportRow @bind-Issue="issues[index]" />

                        <ReportDetailsRow Issue="@issues[index]" />
                    }
                </tbody>

            </table>
        }
        else
        {
            <div class="alert alert-light">
                There is nothing to show yet
            </div>
        }
    }

</main>

@code {
    private List<IssueViewModel> issues;

    bool isPolling = true;
    string textPollingButton => isPolling ? "Stop polling" : "Start polling";
    string cssPollingButton => isPolling ? "btn-primary" : "btn-secondary";
    string icoPollingButton => isPolling ? "oi-media-pause" : "oi-media-play";

    bool isAnyDetailsVisible => issues?.Where(r => r.DetailsVisible).Any() ?? false;

    protected override async Task OnInitializedAsync()
    {
        await LoadIssues();
    }

    async Task LoadIssues()
    {
        var newData = await reportService.GetLastIssuesAsync();
        newData.ForEach(r => r.DetailsVisible = issues?.SingleOrDefault(rr => rr.Id == r.Id)?.DetailsVisible ?? false);
        issues = newData;
        StateHasChanged();
    }

    void ShowAllDetails(bool detailsVisible)
    {
        issues?.ForEach(r => r.DetailsVisible = detailsVisible);
        StateHasChanged();
    }
}
