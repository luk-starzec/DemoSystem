
<details class="mt-4">

    <summary class="bg-secondary text-white d-flex justify-content-center align-items-center rounded">
        <h4 class="m-0 p-2 text-center flex-grow-1">
            @HeaderText
        </h4>
    </summary>

    <div class="position-relative">

        <MaskPanel Visible="@processing" />

        <table class="table">

            <thead class="bg-secondary text-white">

                <tr>
                    <th>
                        <FilterName @bind-Text="searchText" />
                    </th>

                    <th>
                        <FilterPriorityLevel @bind-Low="isLow" @bind-Normal="isNormal" @bind-High="isHigh" />
                    </th>

                    <th style="width: 15em;">
                        <button class="btn btn-dark form-control" @onclick="() => edit = !edit">
                            @if (edit)
                            {
                                <span class="oi oi-eye mr-2"></span>
                                <span>View</span>
                            }
                            else
                            {
                                <span class="oi oi-pencil mr-2"></span>
                                <span>Edit</span>
                            }
                        </button>
                    </th>

                </tr>

            </thead>

            <tbody>

                @foreach (var item in filteredItems)
                {
                    if (edit)
                    {
                        <PriorityItemEditRow Model="@item" OnSave="SaveItem" OnDelete="DeleteItem" />
                    }
                    else
                    {
                        <PriorityItemRow Model="@item" />
                    }
                }

                @if (edit)
                {
                    <PriorityItemNewRow Names="@availableNames" OnAdd="AddItem" />
                }

            </tbody>

        </table>

    </div>
</details>


@code {
    [Parameter]
    public string HeaderText { get; set; }
    [Parameter]
    public List<PriorityViewModel> Items { get; set; }
    [Parameter]
    public List<string> Names { get; set; }

    [Parameter]
    public EventCallback<PriorityViewModel> OnAdd { get; set; }
    [Parameter]
    public EventCallback<PriorityViewModel> OnSave { get; set; }
    [Parameter]
    public EventCallback<PriorityViewModel> OnDelete { get; set; }

    string searchText = "";

    bool isLow = true;
    bool isNormal = true;
    bool isHigh = true;

    IEnumerable<PriorityViewModel> filteredItems => Items.Where(r => IsMatchingItem(r)).OrderBy(r => r.Name);

    List<string> availableNames => Names.Where(r => !isNameUsed(r)).OrderBy(r => r).ToList();

    bool edit;
    bool processing;


    async Task InvokeAction(EventCallback<PriorityViewModel> action, PriorityViewModel viewModel)
    {
        processing = true;
        await action.InvokeAsync(viewModel);
        processing = false;
    }

    async Task AddItem(PriorityViewModel item) => await InvokeAction(OnAdd, item);

    async Task SaveItem(PriorityViewModel item) => await InvokeAction(OnSave, item);

    async Task DeleteItem(PriorityViewModel item) => await InvokeAction(OnDelete, item);

    bool IsMatchingItem(PriorityViewModel item)
    {
        if (!string.IsNullOrWhiteSpace(searchText) && !item.Name.ToLower().Contains(searchText.ToLower()))
            return false;

        if (item.PriorityLevel == EnumPriorityLevel.Low && !isLow)
            return false;
        if (item.PriorityLevel == EnumPriorityLevel.Normal && !isNormal)
            return false;
        if (item.PriorityLevel == EnumPriorityLevel.High && !isHigh)
            return false;

        return true;
    }

    bool isNameUsed(string name) => Items.Any(r => r.Name == name);
}
