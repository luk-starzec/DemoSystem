@inject IJSRuntime js

<tr id="newRowId">
    @if (detailsVisible)
    {
        <td>
            <select @bind="model.Name" class="form-control @cssName" @onclick="CheckName">
                @foreach (var name in Names)
                {
                    <option value="@name">@name</option>
                }
            </select>
        </td>

        <td class="text-center">
            <PriorityLevelEditCell @bind-PriorityLevel="model.PriorityLevel" />
        </td>

        <td class="text-center">
            <button class="btn btn-sm alert-secondary px-4" @onclick="Add">
                <span class="oi oi-plus"></span>
                Add
            </button>
        </td>

    }
    else
    {
        <td colspan="3">
            <button class="btn col btn-primary" @onclick="ShowDetails">
                <span class="oi oi-plus mr-3"></span>
                Add new item
            </button>
        </td>
    }
</tr>

@code {
    [Parameter]
    public List<string> Names { get; set; } = new List<string>();
    [Parameter]
    public EventCallback<PriorityViewModel> OnAdd { get; set; }
    [Parameter]
    public bool DetailsVisible
    {
        get => detailsVisible;
        set
        {
            if (value == detailsVisible)
                return;
            detailsVisible = value;
            InvokeAsync(ScrollTo);
        }
    }

    PriorityViewModel model;

    bool detailsVisible = false;
    bool errorVisible = false;

    string cssName => errorVisible ? "invalid" : "";


    protected override void OnInitialized()
    {
        SetEmptyModel();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && DetailsVisible)
            await ScrollTo();
    }

    void ShowDetails()
    {
        SetEmptyModel();
        detailsVisible = true;
    }

    public async Task ScrollTo() => await js.InvokeVoidAsync("scrollToElementId", "newRowId");

    async Task Add()
    {
        CheckName();
        if (errorVisible)
            return;

        await OnAdd.InvokeAsync(model);

        SetEmptyModel();
    }

    void CheckName() => errorVisible = string.IsNullOrEmpty(model.Name);

    void SetEmptyModel() =>
        model = new()
        {
            Name = null,
            PriorityLevel = EnumPriorityLevel.Normal,
        };

}

