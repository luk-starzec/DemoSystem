// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PrioritySetter.Data;

namespace PrioritySetter.Migrations
{
    [DbContext(typeof(PrioritySetterContext))]
    [Migration("20210604171202_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.6");

            modelBuilder.Entity("PrioritySetter.Data.AppPriority", b =>
                {
                    b.Property<string>("App")
                        .HasColumnType("TEXT");

                    b.Property<int>("PriorityLevel")
                        .HasColumnType("INTEGER")
                        .HasColumnName("PriorityLevelId");

                    b.HasKey("App");

                    b.HasIndex("PriorityLevel");

                    b.ToTable("AppPriorities");

                    b.HasData(
                        new
                        {
                            App = "Glob",
                            PriorityLevel = 1
                        });
                });

            modelBuilder.Entity("PrioritySetter.Data.Priority", b =>
                {
                    b.Property<int>("PriorityLevel")
                        .HasColumnType("INTEGER")
                        .HasColumnName("PriorityLevelId");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("PriorityLevel");

                    b.ToTable("DicPriorityLevels");

                    b.HasData(
                        new
                        {
                            PriorityLevel = 2,
                            Description = "Do it",
                            Name = "Normal"
                        },
                        new
                        {
                            PriorityLevel = 3,
                            Description = "Do it now!",
                            Name = "High"
                        },
                        new
                        {
                            PriorityLevel = 1,
                            Description = "Maybe later",
                            Name = "Low"
                        });
                });

            modelBuilder.Entity("PrioritySetter.Data.TitlePriority", b =>
                {
                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<int>("PriorityLevel")
                        .HasColumnType("INTEGER")
                        .HasColumnName("PriorityLevelId");

                    b.HasKey("Title");

                    b.HasIndex("PriorityLevel");

                    b.ToTable("TitlePriorities");

                    b.HasData(
                        new
                        {
                            Title = "NullReferenceException",
                            PriorityLevel = 3
                        },
                        new
                        {
                            Title = "ArgumentNullException",
                            PriorityLevel = 3
                        },
                        new
                        {
                            Title = "OutOfMemoryException",
                            PriorityLevel = 3
                        },
                        new
                        {
                            Title = "MissingFieldException",
                            PriorityLevel = 1
                        },
                        new
                        {
                            Title = "MissingMemberException",
                            PriorityLevel = 1
                        },
                        new
                        {
                            Title = "MissingMethodException",
                            PriorityLevel = 1
                        });
                });

            modelBuilder.Entity("PrioritySetter.Data.AppPriority", b =>
                {
                    b.HasOne("PrioritySetter.Data.Priority", "PriorityRelation")
                        .WithMany()
                        .HasForeignKey("PriorityLevel")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PriorityRelation");
                });

            modelBuilder.Entity("PrioritySetter.Data.TitlePriority", b =>
                {
                    b.HasOne("PrioritySetter.Data.Priority", "PriorityRelation")
                        .WithMany()
                        .HasForeignKey("PriorityLevel")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PriorityRelation");
                });
#pragma warning restore 612, 618
        }
    }
}
